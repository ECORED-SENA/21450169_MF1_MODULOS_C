

.container#programacion

    .header-ecored

        h1 1. Programación orientada a objetos

    .row.mx-0.recuadro1

        .col-12

            p La programación orientada a objetos consiste básicamente en la forma en que se piensa para efectuar el proceso de escritura de las diferentes secuencias de código que componen un programa o desarrollo de 
                i software.

            p.m-0 A lo largo del tiempo se había venido programando de forma secuencial y podría decirse, muy mecánica, sin tener un pensamiento un poco más realista que aporte diferentes beneficios a los códigos escritos; lo que se busca con el paradigma orientado a objetos es que los programas sean pensados de un modo que sus componentes puedan ser utilizados en diferentes soluciones, ya que muchas veces hay varias aplicaciones que comparten características entre sí y de este modo podría optimizarse tiempo y recursos en el ejercicio de la programación.

        .col-12.py-5

            img(src="assets/images/pages/img1.svg", style="max-width: 100%").img-fluid
        
        .col-12

            p En el proceso de programar bajo el paradigma orientado a objetos, se trata de pensar cada componente de una aplicación como un elemento independiente; dichos elementos serían los denominados clases, que constituyen el esquema general de almacenamiento de la estructura básica de esos componentes, y cuando se realiza la definición específica de cada componente, éste se denomina objeto, que es el que contiene diferentes atributos, representados en las variables que almacenan información de cada objeto y diferentes procedimientos que los objetos pueden realizar dentro del sistema.

            p.m-0 Una vez definida la clase donde se mencionan los diferentes métodos y atributos que la componen, basándose en ella, se comienza la creación de los objetos y este proceso es el que se conoce como 
                b instanciación de una clase
                |, donde se usa el esquema definido para crear un objeto a partir de este.
    
    br

    .row.mx-0.recuadro2.align-items-center

        .col-2.text-center

            img(src="assets/images/pages/img2.svg", style="max-width: 100%").img-fluid

        .col-10

            p.m-0 Es importante tener en cuenta que la conceptualización y teorización sobre el paradigma orientado a objetos es una temática bastante amplia, sobre la cual se puede encontrar mucha información que profundiza en cada una de las definiciones propias de esta forma de programar; sin embargo, en este material de formación se aborda de un modo resumido para contextualizar al aprendiz respecto al tema, de manera que pueda dar inicio satisfactorio al proceso de formación en curso.
    
    br#conceptos

    .header-ecored

        h2 1.1 Conceptos básicos

    .row.mx-0.recuadro1

        .col-12

            p Como se vio en la introducción, al hablar del paradigma orientado a objetos surgen cinco (5) conceptos específicos sobre los cuales es necesario tener claridad para que el proceso de programación sea satisfactorio. Estos conceptos pueden observarse en la siguiente figura.

        .col-12.text-center

            p
                b Conceptos básicos de la programación orientada a objetos

            img(src="assets/images/pages/img3.png", style="max-width: 50%").img-fluid

    br

    .row.mx-0.recuadro1

        .col-12.icon.clase

            p.m-0.text-icon
                b Clase

        .col-12.mt-3

            p Una clase consiste en una especie de plantilla donde se definen los atributos o características, los métodos o comportamientos que van a compartir cierto conjunto de elementos similares; con base en esto, en el paradigma de programación orientada a objetos pueden existir muchos elementos relacionados con la misma clase, que comparten métodos y atributos o tienen los suyos propios.  Para ilustrarlo con un ejemplo, se puede pensar en la clase 
                i VEHÍCULO
                | , donde es posible definir muchos vehículos que conservan atributos compartidos como por ejemplo modelo y marca y otros que sean diferentes como número de motor y de placa y así mismo pueden compartir métodos como avanzar, frenar, cambiar de velocidad, etc.

    br

    .row.mx-0.recuadro1

        .col-12.icon.instancia

            p.m-0.text-icon
                b Instancia

        .col-12.mt-3

            p Consiste en el procedimiento efectuado cuando se crea un objeto a partir de una clase; es decir, cuando en el código del programa se diligencia la información según la plantilla establecida por la clase. Es importante tener en cuenta que dentro de un programa puede haber varias instancias de la misma clase; para continuar con el ejemplo de la clase 
                i VEHÍCULO
                | , se supone que se tenga una instancia con un vehículo motor MC21 de marca Renault, otra instancia con un vehículo motor AB147 de marca Mazda y otra instancia de vehículo motor XA41B marca Daewoo; la clase para todos es igual y todos comparten los métodos avanzar, frenar y cambiar de velocidad, pero son instancias diferentes.

            p Para establecer claridad en el concepto, surge una analogía interesante que puede hacerlo más entendible, y se trata de que la clase se observe como una receta de cocina (ingredientes para hacer galletas, procedimiento para fabricarlas, tiempo de cocción, etc.) y la instancia como el producto terminado (galletas listas); es decir, la clase indica cómo debe definirse y la instancia es la definición en sí.

    br

    .row.mx-0.recuadro1

        .col-12.icon.objeto

            p.m-0.text-icon
                b Objeto

        .col-12.mt-3

            p El objeto es cada uno de los elementos creados a partir de las clases; un objeto entonces pertenece a una clase y por tal razón dispone de las características y los comportamientos de esta, conocidos en el paradigma orientado a objetos como atributos y métodos.

            p Recordando nuevamente la analogía mencionada en el concepto de instancia, los objetos podrían ser 
                i galleta de mantequilla, galleta de chips, galleta integral 
                | y llevándolo al ejemplo de la clase 
                i VEHÍCULO 
                | podrían tenerse diferentes objetos tal como se ilustra en la siguiente figura, donde los cuatro objetos creados tienen diferentes atributos pero comparten los mismos métodos.

        .col-12.text-center

            img(src="assets/images/pages/img2.png", style="max-width: 60%").img-fluid

    br

    .row.mx-0.recuadro3.justify-content-center
        
        .col-12

            p En el siguiente ejemplo se observa la creación de una clase, con sus atributos y métodos en C++; así como también la instanciación de la misma a través de la creación de dos objetos a partir de ella. Se recomienda digitar el código en un editor de texto para continuar con la práctica del lenguaje.
        
        .col-4

            .card.mt-3

                a.btn(href="media/documentos/MF1_Ejemplo1_Clase_y_objetos.pdf" target="_blank").media-link      

                    img(src="assets/images/pages/img35.svg", alt="").media-link-icon

                    .media-link-title
                        p #[strong Ejemplo 1]. Clase y objetos

    br#caracteristicas

    .header-ecored

        h2 1.2 Características

    .row.mx-0.recuadro1

        .col-12

            p Para que un lenguaje pueda estar incluido dentro del paradigma orientado a objetos, debe reunir las características que se observan en la siguiente figura.

        .col-12.text-center

            p
                b Características del paradigma orientado a objetos

            img(src="assets/images/pages/img4.png", style="max-width: 40%").img-fluid
    
    br

    .row.mx-0.recuadro1

        .col-12.icon.abstraccion

            p.m-0.text-icon
                b Abstracción
        
        .col-12.mt-3

            p Es el proceso que se realiza para identificar los componentes y comportamientos de una clase, donde el objetivo principal es descartar lo que no es importante y asegurar que se tiene en cuenta lo esencial para que la clase pueda ser funcional.

            p En la programación, esta característica permite que el código sea más portable; es decir, que pueda reutilizarse con mayor facilidad. La clave para que la abstracción sea satisfactoria está en definir los datos y comportamientos comunes a un conjunto de elementos para crear con ellos cada clase.

    br

    .row.mx-0.recuadro1

        .col-12.icon.herencia

            p.m-0.text-icon
                b Herencia
        
        .col-12.mt-3

            p Consiste en el proceso por medio del cual se crea una clase a partir de otra que ya existe. Este concepto puede entenderse de forma muy similar al concepto de herencia en un ámbito familiar, un padre hereda ciertas características a sus hijos, así mismo, la clase original o clase padre, también llamada súper clase, hereda a otras clases llamadas subclases o clases hijas, sus métodos y atributos.

            p Esta característica permite definir métodos y atributos nuevos en las clases hijas y aplicarlos a los que fueron heredados.
        
        .row.mx-0.recuadro2.align-items-center

            .col-2.text-center

                img(src="assets/images/pages/img11.svg", style="max-width: 100%").img-fluid

            .col-10

                p.m-0 Particularmente algunos lenguajes, entre ellos el C++, permiten la implementación de la herencia múltiple, que significa que la clase hija hereda los atributos de dos clases padre, esto con el fin de reunir en una sola varios atributos existentes en diferentes clases.

    br

    .row.mx-0.recuadro3.justify-content-center
        
        .col-12

            p En la siguiente ejemplo se observa la aplicación de la herencia en C++ a través de la creación de un programa con una superclase llamada Persona, que tiene una clase hija llamada Empleado. Se debe digitar el código en el Dev-C++ para continuar con la práctica del lenguaje.
        
        .col-4

            .card.mt-3

                a.btn(href="media/documentos/MF1_Ejemplo2_Herencia.pdf" target="_blank").media-link      

                    img(src="assets/images/pages/img35.svg", alt="").media-link-icon

                    .media-link-title
                        p #[strong Ejemplo 2]. Herencia

    br

    .row.mx-0.recuadro1

        .col-12.icon.encapsulacion

            p.m-0.text-icon
                b Encapsulación
        
        .col-12.mt-3

            p Es el mecanismo que garantiza protección de la información contenida en una clase, puede verse como un sistema de permisos con el cual se configura qué o quiénes pueden acceder a determinados datos y de qué manera.

            p Dentro de este mecanismo se establecen tres niveles que son: privado, protegido y público, los cuales definen las restricciones de acceso a los métodos de la misma clase, a las funciones de la misma clase padre y la clase hijo y a los datos y métodos de todas las clases, respectivamente. En la siguiente figura se ilustra lo anterior.

        .col-12.text-center

            p
                b Niveles de encapsulación

            img(src="assets/images/pages/img5.png", style="max-width: 60%").img-fluid

        .row.mx-0.recuadro2.align-items-center.mt-4

            .col-2.text-center

                img(src="assets/images/pages/img14.svg", style="max-width: 100%").img-fluid

            .col-10

                p.m-0 Finalmente, en el encapsulamiento lo que se obtiene es que quien utilice el objeto solo tenga relación con la interfaz, sin tener que entenderse con la forma en que esta fue implementada.
    
    br

    .row.mx-0.recuadro1

        .col-12.icon.polimorfismo

            p.m-0.text-icon
                b Polimorfismo
        
        .col-12.mt-3

            p Se trata de la característica que tienen los objetos para reaccionar de forma diferente a un mismo mensaje; es decir, aunque se trate de la misma acción, cada objeto responde de acuerdo con los parámetros que hayan sido enviados al invocar la respectiva función.

            p Una de las cosas principales que se pretende con el polimorfismo es reducir el mantenimiento de las soluciones informáticas; para aplicarlo es importante tener en cuenta que los objetos cumplan con el requisito de saber responder al mensaje enviado.
        
        .col-12

            img(src="assets/images/pages/img16.svg", style="max-width: 100%").img-fluid

        .col-12.mt-3

            p El polimorfismo es un concepto de la programación orientada a objetos que está estrechamente relacionado con la herencia, ya que una clase padre hereda a sus clases hijas atributos y métodos, pero cada una de esas clases hijas realiza las acciones a su manera. Continuando con la ejemplificación a través de la clase 
                i VEHÍCULO
                | , se puede suponer que dicha clase tiene un método llamado 
                i parquear() 
                | y que a través de la herencia se crean clases hijas llamadas carro, moto y camión, es el polimorfismo el que permite que únicamente sea necesario tener un método llamado 
                i parquear()
                | , ya que al declararlo se le configura para que reciba como parámetro cualquier objeto de la clase 
                i VEHÍCULO.

    br

    .row.mx-0.recuadro3.justify-content-center
        
        .col-12

            p En el siguiente ejemplo se observa la aplicación de herencia con polimorfismo en C++ a través de la creación de un programa con una superclase llamada Persona, que tiene dos clases hijas llamadas Empleado y Socio y que aplica polimorfismo que se hace evidente en el método ver().  Digitar el código en el Dev-C++ para continuar con la práctica del lenguaje.
        
        .col-4

            .card.mt-3

                a.btn(href="media/documentos/MF1_Ejemplo3_Polimorfismo.pdf" target="_blank").media-link      

                    img(src="assets/images/pages/img35.svg", alt="").media-link-icon

                    .media-link-title
                        p #[strong Ejemplo 3]. Polimorfismo